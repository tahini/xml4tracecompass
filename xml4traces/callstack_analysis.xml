<?xml version="1.0" encoding="UTF-8"?>
<tmfxml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="xmlDefinition.xsd">
<!-- ***************************************************************************
* Copyright (c) 2016 École Polytechnique de Montréal
*
* All rights reserved. This program and the accompanying materials are
* made available under the terms of the Eclipse Public License v1.0 which
* accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*************************************************************************** -->
<!-- 
This XML analysis creates a callstack state system and callstack view 

To run such an analysis, one needs a trace (here a UST trace) with function entry and exit
events. This UST trace needs the 'vtid' context to associate with the function entry and
exits to the right thread.

-->
	<pattern version="0" id="dorsal.hsa.callstack">
		<head>
			<traceType id="org.eclipse.linuxtools.lttng2.ust.tracetype" />
			<label value="XML CallStack" />
		</head>
	
	<!-- 	The attribute initial specifies the FSMs that will be instanciated at the beginning of the analysis -->
		<patternHandler initial="call_stack">

			<action id="func_entry">
	<!-- 		Push the name of the function under the thread's callstack -->
				<stateChange>
					<stateAttribute type="constant" value="Callstack" />
					<stateAttribute type="eventField" value="context._vtid" />
					<stateValue type="eventField" value="name" stack="push" />
				</stateChange>
			</action>

			<action id="func_exit">
	<!-- 		Pop the name of the function from the thread's callstack. No verification is done
                        on the function name, so if there are lost events (or missing events), that may
                        not be accurate -->
				<stateChange>
					<stateAttribute type="constant" value="Callstack" />
					<stateAttribute type="eventField" value="context._vtid" />
					<stateValue type="eventField" value="name" stack="pop" />
				</stateChange>
			</action>


	<!-- The callstack state machine. Only one state is needed and it loops on itself -->
			<fsm id="call_stack" multiple="false" initial="loop">
				<state id="loop">
					<transition event="hsa_runtime:function_entry" target="loop" action="func_entry" />
					<transition event="hsa_runtime:function_exit" target="loop" action="func_exit" />
				</state>
			</fsm>

		</patternHandler>
	</pattern>

        <!-- A time graph view for this callstack analysis -->
	<timeGraphView id="hsa.callstack">
		<head>
			<analysis id="dorsal.hsa.callstack" /> <!-- id has to match analysis id above -->
			<label value="XML Callstack View" />
		</head>

		<!-- Corresponds to where the function names were pushed -->
		<entry path="Callstack/*">
			<display type="self" /> <!-- Will display a line for each thread (Callstack/*) -->
			<entry path="*">
				<display type="self" /> <!-- Will display the function calls as children of the thread -->
			</entry>
		</entry>
	</timeGraphView>
</tmfxml>
